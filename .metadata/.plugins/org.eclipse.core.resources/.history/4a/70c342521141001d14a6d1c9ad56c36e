#include <msp430.h> 


/**
 * Lab3_LCD
 */

#define     _SET_OUTPUT(port, pin)  P ## port ## DIR |= BIT ## pin

#define     _SET_PIN(port, pin)     P ## port ## OUT |= BIT ## pin
#define     _CLEAR_PIN(port, pin)   P ## port ## OUT &= ~BIT ## pin

int i;

static void Wait(volatile int time_1)
{
    volatile int time_2;
    for (time_1; time_1>1; time_1--)
    {
        for (time_2 = 110; time_2 >= 0; time_2--);
    }
}

void setWriteInstruction() {
    _CLEAR_PIN(6, 7);           // RS output    (0)
    _CLEAR_PIN(7, 4);           // RW output    (0)
}

void setReadInstruction() {
    _CLEAR_PIN(6, 7);           // RS output    (0)
    _SET_PIN(7, 4);             // RW output    (1)
}

void setWriteData() {
    _SET_PIN(6, 7);             // RS output    (1)
    _CLEAR_PIN(7, 4);           // RW output    (0)
}

void setReadData() {
    _SET_PIN(6, 7);             // RS output    (1)
    _SET_PIN(7, 4);             // RW output    (1)
}

void setCursorPOS(char direction, int amount) {
    setWriteInstruction();
    int i;
    if(direction == 'l') {
        for(i = 0; i < amount; i++) {
//            _SET_PIN(3, 4);             // D0 output    (1) (1 = Cursor blink ON, Cursor blink OFF)
//            _CLEAR_PIN(3, 5);           // D1 output    (0) (1 = Cursor ON, 0 = Cursor OFF)
            _CLEAR_PIN(3, 6);           // D2 output    (0) (1 = ON, 0 = OFF)
            _CLEAR_PIN(3, 7);           // D3 output    (0)
            _SET_PIN(4, 0);             // D4 output    (1)
            _CLEAR_PIN(4, 1);           // D5 output    (0)
            _CLEAR_PIN(4, 2);           // D6 output    (0)
            _CLEAR_PIN(4, 3);           // D7 output    (0)

            _SET_PIN(7, 5);             // E output     (1)
            _CLEAR_PIN(7, 5);           // E output     (0)

            Wait(100);
        }
    }

    if(direction == 'r') {
        for(i = 0; i < amount; i++) {
//            _SET_PIN(3, 4);             // D0 output    (1) (1 = Cursor blink ON, Cursor blink OFF)
//            _CLEAR_PIN(3, 5);           // D1 output    (0) (1 = Cursor ON, 0 = Cursor OFF)
            _SET_PIN(3, 6);             // D2 output    (1) (1 = ON, 0 = OFF)
            _CLEAR_PIN(3, 7);           // D3 output    (0)
            _SET_PIN(4, 0);             // D4 output    (1)
            _CLEAR_PIN(4, 1);           // D5 output    (0)
            _CLEAR_PIN(4, 2);           // D6 output    (0)
            _CLEAR_PIN(4, 3);           // D7 output    (0)

            _SET_PIN(7, 5);             // E output     (1)
            _CLEAR_PIN(7, 5);           // E output     (0)

            Wait(100);
        }
    }
}

void writeChar(char* character) {
    setWriteData();
    if(character == "a") {
        _SET_PIN(3, 4);             // D0 output    (1)
        _CLEAR_PIN(3, 5);           // D1 output    (0)
        _CLEAR_PIN(3, 6);           // D2 output    (0)
        _CLEAR_PIN(3, 7);           // D3 output    (0)
        _CLEAR_PIN(4, 0);           // D4 output    (0)
        _SET_PIN(4, 1);             // D5 output    (1)
        _SET_PIN(4, 2);             // D6 output    (1)
        _CLEAR_PIN(4, 3);           // D7 output    (0)

        _SET_PIN(7, 5);             // E output     (1)
        _CLEAR_PIN(7, 5);           // E output     (0)
    }

    Wait(100);

}

void writeCommand(char* command) {           // Put helper functions here
    setWriteInstruction();
    if(command == "FunctionSet") {
        _CLEAR_PIN(3, 4);           // D0 output    (x) (NOT NEEDED)
        _CLEAR_PIN(3, 5);           // D1 output    (x) (NOT NEEDED)
        _CLEAR_PIN(3, 6);           // D2 output    (0) (1 = 5*11, 0 = 5*8)
        _SET_PIN(3, 7);             // D3 output    (1) (1 = 2 lines, 0 = 1 line)
        _SET_PIN(4, 0);             // D4 output    (1) (1 = 8 bits, 0 = 4 bits)
        _SET_PIN(4, 1);             // D5 output    (1)
        _CLEAR_PIN(4, 2);           // D6 output    (0)
        _CLEAR_PIN(4, 3);           // D7 output    (0)
        Wait(100);

        _SET_PIN(7, 5);             // E output     (1)
        _CLEAR_PIN(7, 5);           // E output     (0)
    }

    if(command == "DisplayON") {
        _SET_PIN(3, 4);             // D0 output    (1) (1 = Cursor blink ON, Cursor blink OFF)
        _CLEAR_PIN(3, 5);           // D1 output    (0) (1 = Cursor ON, 0 = Cursor OFF)
        _SET_PIN(3, 6);             // D2 output    (1) (1 = ON, 0 = OFF)
        _SET_PIN(3, 7);             // D3 output    (1)
        _CLEAR_PIN(4, 0);           // D4 output    (0)
        _CLEAR_PIN(4, 1);           // D5 output    (0)
        _CLEAR_PIN(4, 2);           // D6 output    (0)
        _CLEAR_PIN(4, 3);           // D7 output    (0)
        Wait(100);

        _SET_PIN(7, 5);             // E output     (1)
        _CLEAR_PIN(7, 5);           // E output     (0)
    }

    if(command == "DisplayOFF") {
        _CLEAR_PIN(3, 4);           // D0 output    (0) (1 = Cursor blink ON, Cursor blink OFF)
        _CLEAR_PIN(3, 5);           // D1 output    (0) (1 = Cursor ON, 0 = Cursor OFF)
        _CLEAR_PIN(3, 6);           // D2 output    (0) (1 = ON, 0 = OFF)
        _SET_PIN(3, 7);             // D3 output    (1)
        _CLEAR_PIN(4, 0);           // D4 output    (0)
        _CLEAR_PIN(4, 1);           // D5 output    (0)
        _CLEAR_PIN(4, 2);           // D6 output    (0)
        _CLEAR_PIN(4, 3);           // D7 output    (0)
        Wait(100);

        _SET_PIN(7, 5);             // E output     (1)
        _CLEAR_PIN(7, 5);           // E output     (0)
    }

    if(command == "DisplayClear") {
        _SET_PIN(3, 4);             // D0 output    (1)
        _CLEAR_PIN(3, 5);           // D1 output    (0)
        _CLEAR_PIN(3, 6);           // D2 output    (0)
        _CLEAR_PIN(3, 7);           // D3 output    (0)
        _CLEAR_PIN(4, 0);           // D4 output    (0)
        _CLEAR_PIN(4, 1);           // D5 output    (0)
        _CLEAR_PIN(4, 2);           // D6 output    (0)
        _CLEAR_PIN(4, 3);           // D7 output    (0)
        Wait(100);

        _SET_PIN(7, 5);             // E output     (1)
        _CLEAR_PIN(7, 5);           // E output     (0)
    }

    if(command == "EntryMode") {
        _CLEAR_PIN(3, 4);           // D0 output    (0) (display shift)
        _SET_PIN(3, 5);             // D1 output    (1) (1 = increment, 0 = decrement)
        _SET_PIN(3, 6);             // D2 output    (1)
        _CLEAR_PIN(3, 7);           // D3 output    (0)
        _CLEAR_PIN(4, 0);           // D4 output    (0)
        _CLEAR_PIN(4, 1);           // D5 output    (0)
        _CLEAR_PIN(4, 2);           // D6 output    (0)
        _CLEAR_PIN(4, 3);           // D7 output    (0)
        Wait(100);

        _SET_PIN(7, 5);             // E output     (1)
        _CLEAR_PIN(7, 5);           // E output     (0)
    }

    if(command == "ReturnHome") {
        _CLEAR_PIN(3, 4);           // D0 output    (0) (display shift)
        _SET_PIN(3, 5);             // D1 output    (1) (1 = increment, 0 = decrement)
        _CLEAR_PIN(3, 6);           // D2 output    (0)
        _CLEAR_PIN(3, 7);           // D3 output    (0)
        _CLEAR_PIN(4, 0);           // D4 output    (0)
        _CLEAR_PIN(4, 1);           // D5 output    (0)
        _CLEAR_PIN(4, 2);           // D6 output    (0)
        _CLEAR_PIN(4, 3);           // D7 output    (0)
        Wait(100);

        _SET_PIN(7, 5);             // E output     (1)
        _CLEAR_PIN(7, 5);           // E output     (0)
    }
}

void writeMessage() {
    setWriteData();



    _SET_PIN(7, 5);             // E output     (1)
    _CLEAR_PIN(7, 5);           // E output     (0)

}

void functionSet() {
    _CLEAR_PIN(3, 4);           // D0 output    (x) (NOT NEEDED)
    _CLEAR_PIN(3, 5);           // D1 output    (x) (NOT NEEDED)
    _CLEAR_PIN(3, 6);           // D2 output    (0) (1 = 5*11, 0 = 5*8)
    _SET_PIN(3, 7);             // D3 output    (1) (1 = 2 lines, 0 = 1 line)
    _SET_PIN(4, 0);             // D4 output    (1) (1 = 8 bits, 0 = 4 bits)
    _SET_PIN(4, 1);             // D5 output    (1)
    _CLEAR_PIN(4, 2);           // D6 output    (0)
    _CLEAR_PIN(4, 3);           // D7 output    (0)

    _SET_PIN(7, 5);             // E output     (1)
    _CLEAR_PIN(7, 5);           // E output     (0)
}

void displayON() {
    _SET_PIN(3, 4);             // D0 output    (1) (1 = Cursor blink ON, Cursor blink OFF)
    _CLEAR_PIN(3, 5);           // D1 output    (0) (1 = Cursor ON, 0 = Cursor OFF)
    _SET_PIN(3, 6);             // D2 output    (1) (1 = ON, 0 = OFF)
    _SET_PIN(3, 7);             // D3 output    (1)
    _CLEAR_PIN(4, 0);           // D4 output    (0)
    _CLEAR_PIN(4, 1);           // D5 output    (0)
    _CLEAR_PIN(4, 2);           // D6 output    (0)
    _CLEAR_PIN(4, 3);           // D7 output    (0)

    _SET_PIN(7, 5);             // E output     (1)
    _CLEAR_PIN(7, 5);           // E output     (0)
}

void displayClear() {
    _SET_PIN(3, 4);             // D0 output    (1)
    _CLEAR_PIN(3, 5);           // D1 output    (0)
    _CLEAR_PIN(3, 6);           // D2 output    (0)
    _CLEAR_PIN(3, 7);           // D3 output    (0)
    _CLEAR_PIN(4, 0);           // D4 output    (0)
    _CLEAR_PIN(4, 1);           // D5 output    (0)
    _CLEAR_PIN(4, 2);           // D6 output    (0)
    _CLEAR_PIN(4, 3);           // D7 output    (0)

    _SET_PIN(7, 5);             // E output     (1)
    _CLEAR_PIN(7, 5);           // E output     (0)
}

void entryMode() {
    _CLEAR_PIN(3, 4);           // D0 output    (0) (display shift)
    _SET_PIN(3, 5);             // D1 output    (1) (1 = increment, 0 = decrement)
    _SET_PIN(3, 6);             // D2 output    (1)
    _CLEAR_PIN(3, 7);           // D3 output    (0)
    _CLEAR_PIN(4, 0);           // D4 output    (0)
    _CLEAR_PIN(4, 1);           // D5 output    (0)
    _CLEAR_PIN(4, 2);           // D6 output    (0)
    _CLEAR_PIN(4, 3);           // D7 output    (0)

    _SET_PIN(7, 5);             // E output     (1)
    _CLEAR_PIN(7, 5);           // E output     (0)
}

void initLCD() {
    Wait(1000);
    _CLEAR_PIN(6, 7);           // RS output    (0)
    _CLEAR_PIN(7, 4);           // RW output    (0)
    functionSet();
    Wait(2000);
    functionSet();
    Wait(2000);
    functionSet();
    functionSet();
    displayON();
    displayClear();
    entryMode();
}

void main(void)
{
    WDTCTL = WDTPW | WDTHOLD;   // stop watchdog timer
    _SET_OUTPUT(6, 7);          // RS output
    _SET_OUTPUT(7, 4);          // RW output
    _SET_OUTPUT(7, 5);          // E output
    _SET_OUTPUT(3, 4);          // D0 output
    _SET_OUTPUT(3, 5);          // D1 output
    _SET_OUTPUT(3, 6);          // D2 output
    _SET_OUTPUT(3, 7);          // D3 output
    _SET_OUTPUT(4, 0);          // D4 output
    _SET_OUTPUT(4, 1);          // D5 output
    _SET_OUTPUT(4, 2);          // D6 output
    _SET_OUTPUT(4, 3);          // D7 output
    initLCD();

//  setCursorPOS('r', 7);
//  setCursorPOS('l', 3);
//  writeCommand("ReturnHome");
//  writeChar("a");
//
//
//  Wait(2000);
//  writeCommand("DisplayClear");
}

